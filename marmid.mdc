---
alwaysApply: false
---
# Mermaid System Status Visualization Format

## Overview
Use this standardized Mermaid format to create clear, comprehensive system status visualizations that are easy to understand and maintain.

## Standard Diagram Types

### 1. System Architecture Overview
```mermaid
graph TB
    subgraph "Layer Name"
        COMPONENT[Component Name<br/>‚úÖ Status]
        COMPONENT2[Component Name<br/>‚ö†Ô∏è Partial]
        COMPONENT3[Component Name<br/>‚ùå Missing]
    end
    
    %% Connections
    COMPONENT --> COMPONENT2
    COMPONENT2 -.-> COMPONENT3
    
    %% Styling
    classDef implemented fill:#d4edda,stroke:#155724,color:#155724
    classDef missing fill:#f8d7da,stroke:#721c24,color:#721c24
    classDef partial fill:#fff3cd,stroke:#856404,color:#856404
    classDef configured fill:#d1ecf1,stroke:#0c5460,color:#0c5460
    
    class COMPONENT implemented
    class COMPONENT2 partial
    class COMPONENT3 missing
```

### 2. Processing Flow Sequence
```mermaid
sequenceDiagram
    participant User
    participant Component1 as Component Name
    participant Component2 as Component Name
    participant DB as Database
    
    Note over User,DB: Current Status: DESCRIPTION
    
    User->>Component1: Action
    Component1->>Component1: Process ‚úÖ
    Component1->>Component2: Trigger
    Component2-->>Component1: Response
    
    alt Success Path
        Component2->>DB: Store data ‚úÖ
    else Error Path
        Note over Component1: Fallback mode
    end
```

### 3. Data Flow Diagrams
```mermaid
flowchart TD
    A["Input Data<br/>data_type: description"] --> B{"Validation Check"}
    
    B -->|"Valid"| C["Process Step 1<br/>operation description"]
    B -->|"Invalid"| D["Error Handling<br/>error message"]
    
    C --> E["Process Step 2<br/>transformation"]
    E --> F["Output Data<br/>result description"]
    
    D --> G["Error Response<br/>error details"]
    
    %% Styling for data flow
    style A fill:#e1f5fe,stroke:#01579b,color:#000000
    style F fill:#c8e6c9,stroke:#2e7d32,color:#000000
    style D fill:#ffcdd2,stroke:#c62828,color:#000000
    style G fill:#ffcdd2,stroke:#c62828,color:#000000
```

## Status Indicators
- ‚úÖ **Complete** - Fully functional
- ‚ö†Ô∏è **Partial** - Needs work
- ‚ùå **Missing** - Not implemented
- üîÑ **In Progress** - Being developed
- üìä **Configured** - Setup complete

## Colors
- **Green (#d4edda)**: Complete components
- **Red (#f8d7da)**: Missing/Broken components  
- **Yellow (#fff3cd)**: Partial components
- **Blue (#d1ecf1)**: Configured components

## Data Flow Colors
- **Light Blue (#e1f5fe)**: Input/Start
- **Light Green (#c8e6c9)**: Output/Success
- **Light Red (#ffcdd2)**: Error/Failure
- **Light Yellow (#fff3cd)**: Warning/Process

## Connections
- **Solid (-->)**: Working connections
- **Dotted (-.->)**: Missing connections
- **Bidirectional (<-->)**: Two-way communication

## Data Flow Rules

### Node Types
- **Input**: `["Name<br/>type: description"]`
- **Process**: `["Action<br/>operation"]`
- **Decision**: `{"Condition"}`
- **Output**: `["Result<br/>description"]`

### Edge Labels
- **Conditions**: `|"condition"|`
- **Flow**: `["transformation"]`

### Colors
- **Blue**: Input/Start
- **Green**: Output/Success
- **Red**: Error/Failure
- **Yellow**: Warning/Process

### Patterns
- **Linear**: Sequential steps
- **Branching**: Decision points
- **Parallel**: Simultaneous processes
- **Convergent**: Multiple inputs ‚Üí One output
- **Divergent**: One input ‚Üí Multiple outputs

### Best Practices
1. Start with clear input
2. Show validation steps
3. Handle all errors
4. End with clear output
5. Use consistent naming
6. Include data types
7. Show transformations

## Required Sections

### 1. System Architecture
- Group by layers
- Show component status
- Include connections
- Use consistent colors

### 2. Processing Flow
- Step-by-step flow
- User interactions
- Success/error paths
- Current status

### 3. Data Flow Diagrams
- Detailed processing steps
- Input/output specs
- Error handling paths
- Consistent styling

### 4. Component Status Table
| Component | Status | Description |
|-----------|--------|-------------|
| Name | ‚úÖ Complete | Brief description |

### 5. Key Issues
- Numbered critical problems
- Clear descriptions
- Prioritized by impact

### 6. Next Steps
- Numbered actions
- Specific tasks
- Ordered by priority

## Best Practices
1. **Consistency**: Same status indicators
2. **Clarity**: Descriptive but concise names
3. **Completeness**: Include all major components
4. **Visual Hierarchy**: Group in subgraphs
5. **Status Accuracy**: Reflect actual state
6. **Actionable**: Specific tasks
7. **Data Flow Clarity**: Clear transformations
8. **Error Handling**: Include error paths

## Usage Examples
- System architecture docs
- Project status reports
- Technical debt visualization
- Integration flow docs
- Component dependency mapping
- Data processing flows
- API workflow visualization
- Error handling flows
